import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';

/**
 * ITodo is the basic interface for a todo entity that we can
 * pass between components, and from components to the web
 * pages. The fields are:
 *
 *  - completed: boolean
 *  - createdOn: string
 *  - id: number - unique identifier generated by the swagger API
 *  - title: ITodoTitle - see below.
 *
 * When we call the API to get a Todo, the resulting JSON should look like:
 *
 *    Todo: {
 *      "completed": "...",
 *      "createdON": "...",
 *      "id": "...",
 *      "title": {
 *        "title": "...",
 *        "task": "..."
 *      }
 *    }
 */
export interface ITodo {
  completed: boolean;
  createdOn: string;
  id: number;
  title: ITodoTitle;
}

/**
 * ITodoTitle is the interface for Todo titles.  Since the basic todo
 * modle only includes a simple title, rather than a more descriptive
 * title + description, this interface combines both to be stored in the
 * API title field.  The title field of the interface is simply the title.
 * The task field contains the more detailed description.
 *
 * This should serialize to something like:
 *
 *    ITodoTitle: {
 *      "title": "Some task title",
 *      "task": "I need to pick up my laundry, and take the dog to the vet."
 *    }
 *
 * That resulting JSON can be fed to the API as text, and it should work
 * OK.  The view & update task functions need this extra description to
 * be of any real use.
 */
export interface ITodoTitle {
  title: string;
  task: string;
}

@Injectable({
  providedIn: 'root'
})
export class TodosService {

  baseUrl = 'http://ec2-18-191-63-47.us-east-2.compute.amazonaws.com:8080/todos';
  constructor(private httpCli: HttpClient) {  }

  postTodo(todoForm): Observable<string>{
    const httpHead = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*', // ABSOLUTELY necessary. Allows control from the API
      })
    };
    // We send our 'todoForm' as the body of our request
    return this.httpCli.post<string>(this.baseUrl, todoForm, httpHead);
  }

  getTodos(): Observable<string[]>{
    // Our API needs a special HEAD to communicate.
    const httpHead = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*', // ABSOLUTELY necessary. Allows control from the API
      })
    };

    return this.httpCli.get<string[]>(this.baseUrl, httpHead);
  }

  deleteTodo(id: number): Observable<string[]>{
      const httpHead = {
        headers: new HttpHeaders({
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        })
      };
      return this.httpCli.delete<string[]>(this.baseUrl + '/' + id, httpHead);
  }
}
